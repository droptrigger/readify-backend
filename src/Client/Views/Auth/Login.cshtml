<div id="app" class="content">
    <div class="logo">
        <img src="~/logo.png" alt="Readify Logo" width="100px" height="100px">
    </div>
    <div class="hello-text">
        Войдите в Readify
    </div>
    <div class="error-box" v-if="error">
        <div class="error-box-content">
            <div class="error-box-text">
                {{ error }}
            </div>
            <div class="error-box-close" @@click="error = ''">
                <img src="~/img/close.png" alt="Close" width="25px" height="25px">
            </div>
        </div>
    </div>
    <div class="main-form">
        <div class="naming-input">
            Имя пользователя или email
        </div>
        <label>
            <input type="text" v-model="username">
        </label>
        <div class="naming-input">
            <div class="naming-input-left">Пароль</div>
            <div class="naming-input-right">
                <a href="#">Забыли пароль?</a>
            </div>
        </div>
        <label>
            <input type="password" v-model="password">
        </label>
        <div class="login-button">
            <button @@click="login">Войти</button>
        </div>
    </div>
    <div class="bottom-block">
        <div class="bottom-text">
            Новичок в Readify? <a href="/auth/registration">Создайте аккаунт</a>.
        </div>
    </div>
</div>
@section scripts {
    <script src="~/lib/vue/vue.global.js"></script>
    <script>
        const { createApp } = Vue;
        const app = createApp({
            data() {
                return {
                    username: "",
                    password: "",
                    error: ""
                };
            },
            methods: {
                async login() {
                    this.error = "";
                    if (!this.username || !this.password) {
                        this.error = "Пожалуйста, заполните все поля.";
                        return;
                    }
                    try {
                        const formData = new FormData();
                        formData.append("EmailOrNickname", this.username);
                        formData.append("Password", this.password);
                        formData.append("Device", "Web");
                        const response = await fetch('https://localhost:7207/api/auth/login', {
                            method: 'POST',
                            credentials: 'include',
                            body: formData,
                        });
                        if (response.ok) {
                            const result = await response.json();
                            console.log("Ответ сервера:", result);
                            localStorage.setItem("accessToken", result.token);
                            window.location.href = "/home";
                        } else {
                            const errorMessage = await response.text();
                            throw new Error(errorMessage);
                        }
                    } catch (error) {
                        this.error = error.message;
                    }
                },
                async checkRefreshToken() {
                    try {
                        const formData = new FormData();
                        formData.append("Device", "Web");

                        const response = await fetch('https://localhost:7207/api/auth/refresh', {
                            method: 'POST',
                            credentials: 'include', // Важно для передачи кук
                            body: formData,
                        });

                        if (response.ok) {
                            const result = await response.json();
                            localStorage.setItem("accessToken", result.accessToken); // Сохраняем новый Access Token
                            window.location.href = "/home"; // Перенаправляем на домашнюю страницу
                        } else {
                            const errorData = await response.json(); // Попытка получить сообщение об ошибке
                            console.log(errorData.message || "Refresh token недействителен или отсутствует.");
                        }
                    } catch (error) {
                        console.error('Ошибка при проверке refresh token:', error.message);
                    }
                }
            },
            mounted() {
                this.checkRefreshToken();
            }
        });
        app.mount('#app');
    </script>
}